const fs = require('fs')
const path = require('path')
const express = require('express')
const favicon = require('serve-favicon')
const compression = require('compression')
const net = require('net')
const shell = require('shelljs')
const resolve = file => path.resolve(__dirname, file)

const isProd = process.env.NODE_ENV === 'production'
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express()

let renderer
if (isProd) {
  // In production: create server renderer using server bundle and index HTML
  // template from real fs.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const bundle = require('../dist-doc/vue-ssr-bundle.json')
  // src/index.template.html is processed by html-webpack-plugin to inject
  // build assets and output as dist/index.html.
  const template = fs.readFileSync(resolve('../dist-doc/index.html'), 'utf-8')
  renderer = createRenderer(bundle, template)
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  require('./setup-dev-server')(app, (bundle, template) => {
    renderer = createRenderer(bundle, template)
  })
}

function createRenderer (bundle, template) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return require('vue-server-renderer').createBundleRenderer(bundle, {
    template,
    cache: require('lru-cache')({
      max: 1000,
      maxAge: 1000 * 60 * 15
    })
  })
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 60 * 60 * 24 * 30 : 0,
  extensions: ['html']
})

app.use(compression({ threshold: 0 }))
app.use(favicon('./public/img/logo.png'))
app.use('/dist-doc', serve('../dist-doc', true))
app.use('/public', serve('../public', true))
app.use('/example', serve('../docs/views', true))
app.use('/build/manifest.json', serve('../build/manifest.json', true))
app.use('/service-worker.js', serve('../dist-doc/service-worker.js'))

const port = process.env.PORT || 1024
let checkPort = function(port) {
    let server = net.createServer().listen(port)
    let promise = new Promise(function(resolve, reject) {
        server.on('listening', function() {
            server.close()
        })
        server.on('error', function(error) {
            errorMessage = error.code;
            switch (error.code) {
                case 'EADDRINUSE':
                    errorMessage = `端口 ${port} 被占用`
                    break
                case 'EACCES':
                    errorMessage = `没有权限监听 ${port} 端口`
                    break
            }
            reject(errorMessage)
        })
        server.on('close', function() {
            resolve()
        })
    })

    return promise
}

let listenPort = (app, port) => {
  app.listen(port, () => {
    console.log(`server started at localhost:${port}`)
  })
}

let killPort = function(port) {
  let promise = new Promise(function(resolve, reject) {
    try {
      let processId = Number(shell.exec(`lsof -t -s TCP:LISTEN -i:${port}`))
      if (processId) {
        console.log(`正在干死进程 ${processId}`)
        shell.exec(`kill ${processId}`, function() {
          console.log(`成功干死进程 ${processId}`)
          setTimeout(function() {
            resolve()
          }, 1000)
        })
      } else {
        reject('没找到进程，如果是以root权限运行的，需手动杀死进程')
      }
    } catch (e) {
      reject(e)
    }
  })
  return promise
}

checkPort(port).then(function() {
    listenPort(app, port)
}).catch(function(errorMessage) {
  console.error(errorMessage);
  killPort(port).then(function() {
      listenPort(app, port)
  }).catch(function(error) {
      console.error('没干死该进程', error)
  })
});

app.get('*', (req, res) => {
  if (!renderer) {
    return res.end('waiting for compilation... refresh in a moment.')
  }

  const s = Date.now()

  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  const errorHandler = err => {
    if (err && err.code === 404) {
      res.status(404).end('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).end('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err)
    }
  }

  renderer.renderToStream({ url: req.url })
    .on('error', errorHandler)
    .on('end', () => {
      // res.end(`<i id="time" class="fn-none">${Date.now() - s}</i></body></html>`);
    })
    .pipe(res)
})
